{
  "address": "0xdc568d3c25edf68912c2b9dc4b1d76920cffc4d0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "login",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "statementId",
          "type": "uint64"
        }
      ],
      "name": "Registration",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "login",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "loginStr",
          "type": "string"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "loginStr",
          "type": "string"
        },
        {
          "internalType": "uint64",
          "name": "statementId",
          "type": "uint64"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "setMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "loginStr",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "proof",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "init_params",
          "type": "uint256[]"
        },
        {
          "internalType": "int256[][]",
          "name": "columns_rotations",
          "type": "int256[][]"
        },
        {
          "internalType": "address",
          "name": "recepient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferZk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedProofs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "usedStatements",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "users",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "nonce",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "statementId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3d7695aaf7e3ac42695f6e6285370176a03dbcd3115ad54b5cfc028237b18c40",
  "receipt": {
    "to": null,
    "from": "0x102e48e40b6e0e2d7da6fc30767ca497b6061d91",
    "contractAddress": "0xdc568d3c25edf68912c2b9dc4b1d76920cffc4d0",
    "transactionIndex": "0x1c",
    "gasUsed": "0x29ad51",
    "logsBloom": "0x
    "blockHash": "0xdde4a38e000fd9f20fe0eb33df07f8167d03de5636c015ff00090e7b53c9b0f8",
    "transactionHash": "0x17203f04f5e00e35134e47f9d486dd974f830d2fcf6b92363d339e39339e9f50",
    "logs": [
      {
        "address": "0xdc568d3c25edf68912c2b9dc4b1d76920cffc4d0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000102e48e40b6e0e2d7da6fc30767ca497b6061d91"
        ],
        "data": "0x",
        "blockNumber": "0x43179c",
        "transactionHash": "0x17203f04f5e00e35134e47f9d486dd974f830d2fcf6b92363d339e39339e9f50",
        "transactionIndex": "0x1c",
        "blockHash": "0xdde4a38e000fd9f20fe0eb33df07f8167d03de5636c015ff00090e7b53c9b0f8",
        "logIndex": "0x27",
        "removed": false
      }
    ],
    "blockNumber": "0x43179c",
    "cumulativeGasUsed": "0x5c69a9",
    "status": "0x1"
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D"
  ],
  "numDeployments": 1,
  "solcInputHash": "d548b2063a0a7e0e7d14a7636d3d1248",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"login\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"statementId\",\"type\":\"uint64\"}],\"name\":\"Registration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"login\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"loginStr\",\"type\":\"string\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"loginStr\",\"type\":\"string\"},{\"internalType\":\"uint64\",\"name\":\"statementId\",\"type\":\"uint64\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"setMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"loginStr\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"proof\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"init_params\",\"type\":\"uint256[]\"},{\"internalType\":\"int256[][]\",\"name\":\"columns_rotations\",\"type\":\"int256[][]\"},{\"internalType\":\"address\",\"name\":\"recepient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferZk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedProofs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"usedStatements\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"nonce\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"statementId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GoogleAuth.sol\":\"GoogleAuth\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"contracts/GoogleAuth.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\ninterface IVerifier {\\n    function verify(\\n        bytes calldata blob,\\n        uint256[] calldata init_params,\\n        int256[][] calldata columns_rotations,\\n        address gate_argument\\n    ) external view returns (bool result);\\n}\\n\\n\\ncontract GoogleAuth is ERC20, Ownable {\\n\\n    using SafeMath for uint256;\\n\\n    struct User {\\n        uint64 nonce;\\n        address verifier;\\n        uint64 statementId;\\n        uint256 balance;\\n    }\\n\\n    // key is hashed login\\n    mapping(bytes32 => User) public users;\\n    mapping(bytes32 => bool) public usedProofs;\\n    mapping(uint64 => bool) public usedStatements;\\n\\n    address public verifier;\\n\\n    uint256 public mintAmount;\\n\\n    // ERC20 public underlyingToken;\\n\\n    event Transfer(bytes32 indexed login, address indexed recepient, uint256 amount);\\n    event Registration(bytes32 indexed login, address verifier, uint64 statementId);\\n\\n    constructor(\\n        address _verifier\\n        // address _underlying\\n    ) \\n        ERC20(\\\"zkAuth\\\", \\\"zkAUTH\\\")\\n    {\\n        verifier = _verifier;\\n        mintAmount = 5;\\n        // underlyingToken = ZKAuthToken(_underlying);\\n    }\\n\\n    function register(string memory loginStr, uint64 statementId) external {\\n        bytes32 login = bytes32(bytes(loginStr));\\n        require(users[login].verifier == address(0), \\\"User already exists\\\");\\n        // Why this is here?\\n        // require(!usedStatements[statementId], \\\"Statement already used\\\");\\n        usedStatements[statementId] = true;\\n        _mint(address(this), mintAmount);\\n        users[login] = User(0, msg.sender, statementId, uint160(mintAmount));\\n        emit Registration(login, msg.sender, statementId);\\n    }\\n\\n    function setMintAmount(uint256 _mintAmount) public onlyOwner {\\n        mintAmount = _mintAmount;\\n    }\\n\\n    function getBalance(string memory loginStr) public view returns(uint256) {\\n        bytes32 login = bytes32(bytes(loginStr));\\n        return users[login].balance;\\n    }\\n\\n    function transferZk(\\n        string memory loginStr,\\n        bytes calldata proof,\\n        uint256[] calldata init_params,\\n        int256[][] calldata columns_rotations,\\n        address recepient,\\n        uint256 amount\\n    ) external {\\n        bytes32 login = bytes32(bytes(loginStr));\\n        User memory user = users[login];\\n        require(user.verifier != address(0), \\\"User doesn't exist\\\");\\n\\n        bytes32 proofHash = keccak256(proof);\\n        require(!usedProofs[proofHash], \\\"Proof already used\\\");\\n\\n        require(user.balance >= amount, \\\"Not enough balance\\\");\\n\\n\\n        bool verifyResult = IVerifier(user.verifier).verify(proof, init_params, columns_rotations, user.verifier);\\n        require(verifyResult, \\\"Proof is not valid\\\");\\n\\n        uint256 contractTokenBalance = balanceOf(address(this));\\n        require(contractTokenBalance >= amount, \\\"Not enough tokens in the contract\\\");\\n\\n        transfer(recepient, amount);\\n\\n        emit Transfer(login, recepient, amount);\\n        user.balance.sub(amount);\\n        usedProofs[proofHash] = true;\\n        user.nonce++;\\n    }\\n}\",\"keccak256\":\"0x1787c5501f6a3a51950b02d149e5c4a16dbe9961d4e8a07ae88d0275e70c4147\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200343d3803806200343d833981810160405281019062000037919062000271565b6040518060400160405280600681526020017f7a6b4175746800000000000000000000000000000000000000000000000000008152506040518060400160405280600681526020017f7a6b4155544800000000000000000000000000000000000000000000000000008152508160039081620000b491906200051d565b508060049081620000c691906200051d565b505050620000e9620000dd6200013960201b60201c565b6200014160201b60201c565b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506005600a819055505062000604565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000239826200020c565b9050919050565b6200024b816200022c565b81146200025757600080fd5b50565b6000815190506200026b8162000240565b92915050565b6000602082840312156200028a576200028962000207565b5b60006200029a848285016200025a565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200032557607f821691505b6020821081036200033b576200033a620002dd565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003a57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000366565b620003b1868362000366565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003fe620003f8620003f284620003c9565b620003d3565b620003c9565b9050919050565b6000819050919050565b6200041a83620003dd565b62000432620004298262000405565b84845462000373565b825550505050565b600090565b620004496200043a565b620004568184846200040f565b505050565b5b818110156200047e57620004726000826200043f565b6001810190506200045c565b5050565b601f821115620004cd57620004978162000341565b620004a28462000356565b81016020851015620004b2578190505b620004ca620004c18562000356565b8301826200045b565b50505b505050565b600082821c905092915050565b6000620004f260001984600802620004d2565b1980831691505092915050565b60006200050d8383620004df565b9150826002028217905092915050565b6200052882620002a3565b67ffffffffffffffff811115620005445762000543620002ae565b5b6200055082546200030c565b6200055d82828562000482565b600060209050601f83116001811462000595576000841562000580578287015190505b6200058c8582620004ff565b865550620005fc565b601f198416620005a58662000341565b60005b82811015620005cf57848901518255600182019150602085019450602081019050620005a8565b86831015620005ef5784890151620005eb601f891682620004df565b8355505b6001600288020188555050505b505050505050565b612e2980620006146000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063b27eb8b41161007c578063b27eb8b4146103b6578063c30a0f25146103e6578063c7cd997f14610416578063cea6ab9814610432578063dd62ed3e14610465578063f2fde38b146104955761014d565b806370a08231146102e0578063715018a6146103105780638da5cb5b1461031a57806395d89b4114610338578063a457c2d714610356578063a9059cbb146103865761014d565b8063313ce56711610115578063313ce5671461020c57806335865f171461022a57806339509351146102465780633a51d246146102765780635694cb0a146102a65780635a2bcc18146102c25761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a057806323b872dd146101be5780632b7ac3f3146101ee575b600080fd5b61015a6104b1565b6040516101679190611868565b60405180910390f35b61018a60048036038101906101859190611932565b610543565b604051610197919061198d565b60405180910390f35b6101a8610566565b6040516101b591906119b7565b60405180910390f35b6101d860048036038101906101d391906119d2565b610570565b6040516101e5919061198d565b60405180910390f35b6101f661059f565b6040516102039190611a34565b60405180910390f35b6102146105c5565b6040516102219190611a6b565b60405180910390f35b610244600480360381019061023f9190611cc7565b6105ce565b005b610260600480360381019061025b9190611932565b6109f3565b60405161026d919061198d565b60405180910390f35b610290600480360381019061028b9190611dd2565b610a2a565b60405161029d91906119b7565b60405180910390f35b6102c060048036038101906102bb9190611e5b565b610a58565b005b6102ca610cbf565b6040516102d791906119b7565b60405180910390f35b6102fa60048036038101906102f59190611eb7565b610cc5565b60405161030791906119b7565b60405180910390f35b610318610d0d565b005b610322610d21565b60405161032f9190611a34565b60405180910390f35b610340610d4b565b60405161034d9190611868565b60405180910390f35b610370600480360381019061036b9190611932565b610ddd565b60405161037d919061198d565b60405180910390f35b6103a0600480360381019061039b9190611932565b610e54565b6040516103ad919061198d565b60405180910390f35b6103d060048036038101906103cb9190611ee4565b610e77565b6040516103dd919061198d565b60405180910390f35b61040060048036038101906103fb9190611f47565b610e97565b60405161040d919061198d565b60405180910390f35b610430600480360381019061042b9190611f74565b610eb7565b005b61044c60048036038101906104479190611f47565b610ec9565b60405161045c9493929190611fb0565b60405180910390f35b61047f600480360381019061047a9190611ff5565b610f41565b60405161048c91906119b7565b60405180910390f35b6104af60048036038101906104aa9190611eb7565b610fc8565b005b6060600380546104c090612064565b80601f01602080910402602001604051908101604052809291908181526020018280546104ec90612064565b80156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b5050505050905090565b60008061054e61104b565b905061055b818585611053565b600191505092915050565b6000600254905090565b60008061057b61104b565b905061058885828561121c565b6105938585856112a8565b60019150509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006012905090565b6000896105da906120d2565b90506000600660008381526020019081526020016000206040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072c90612185565b60405180910390fd5b60008a8a6040516107479291906121d5565b604051809103902090506007600082815260200190815260200160002060009054906101000a900460ff16156107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061223a565b60405180910390fd5b83826060015110156107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f0906122a6565b60405180910390fd5b6000826020015173ffffffffffffffffffffffffffffffffffffffff166320702f578d8d8d8d8d8d8a602001516040518863ffffffff1660e01b8152600401610848979695949392919061259e565b602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610889919061262a565b9050806108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c2906126a3565b60405180910390fd5b60006108d630610cc5565b90508581101561091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290612735565b60405180910390fd5b6109258787610e54565b508673ffffffffffffffffffffffffffffffffffffffff16857f4c13017ee95afc4bbd8a701dd9fbc9733f1f09f5a1b5438b5b9abd48e4c92d788860405161096d91906119b7565b60405180910390a361098c86856060015161151e90919063ffffffff16565b5060016007600085815260200190815260200160002060006101000a81548160ff0219169083151502179055508360000180518091906109cb90612784565b67ffffffffffffffff1667ffffffffffffffff16815250505050505050505050505050505050565b6000806109fe61104b565b9050610a1f818585610a108589610f41565b610a1a91906127b4565b611053565b600191505092915050565b60008082610a37906120d2565b90506006600082815260200190815260200160002060020154915050919050565b600082610a64906120d2565b9050600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290612834565b60405180910390fd5b6001600860008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b5730600a54611534565b6040518060800160405280600067ffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018367ffffffffffffffff168152602001600a5473ffffffffffffffffffffffffffffffffffffffff168152506006600083815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020155905050807f8c238420b7a93d0b301754da65d674a3c50ded89a3b3383983b1c8f88261f98b3384604051610cb2929190612854565b60405180910390a2505050565b600a5481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d1561168a565b610d1f6000611708565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610d5a90612064565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8690612064565b8015610dd35780601f10610da857610100808354040283529160200191610dd3565b820191906000526020600020905b815481529060010190602001808311610db657829003601f168201915b5050505050905090565b600080610de861104b565b90506000610df68286610f41565b905083811015610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e32906128ef565b60405180910390fd5b610e488286868403611053565b60019250505092915050565b600080610e5f61104b565b9050610e6c8185856112a8565b600191505092915050565b60086020528060005260406000206000915054906101000a900460ff1681565b60076020528060005260406000206000915054906101000a900460ff1681565b610ebf61168a565b80600a8190555050565b60066020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900467ffffffffffffffff16908060020154905084565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610fd061168a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103690612981565b60405180910390fd5b61104881611708565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b990612a13565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112890612aa5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161120f91906119b7565b60405180910390a3505050565b60006112288484610f41565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112a25781811015611294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128b90612b11565b60405180910390fd5b6112a18484848403611053565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130e90612ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90612c35565b60405180910390fd5b6113918383836117ce565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e90612cc7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161150591906119b7565b60405180910390a36115188484846117d3565b50505050565b6000818361152c9190612ce7565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159a90612d67565b60405180910390fd5b6115af600083836117ce565b80600260008282546115c191906127b4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161167291906119b7565b60405180910390a3611686600083836117d3565b5050565b61169261104b565b73ffffffffffffffffffffffffffffffffffffffff166116b0610d21565b73ffffffffffffffffffffffffffffffffffffffff1614611706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fd90612dd3565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118125780820151818401526020810190506117f7565b60008484015250505050565b6000601f19601f8301169050919050565b600061183a826117d8565b61184481856117e3565b93506118548185602086016117f4565b61185d8161181e565b840191505092915050565b60006020820190508181036000830152611882818461182f565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c98261189e565b9050919050565b6118d9816118be565b81146118e457600080fd5b50565b6000813590506118f6816118d0565b92915050565b6000819050919050565b61190f816118fc565b811461191a57600080fd5b50565b60008135905061192c81611906565b92915050565b6000806040838503121561194957611948611894565b5b6000611957858286016118e7565b92505060206119688582860161191d565b9150509250929050565b60008115159050919050565b61198781611972565b82525050565b60006020820190506119a2600083018461197e565b92915050565b6119b1816118fc565b82525050565b60006020820190506119cc60008301846119a8565b92915050565b6000806000606084860312156119eb576119ea611894565b5b60006119f9868287016118e7565b9350506020611a0a868287016118e7565b9250506040611a1b8682870161191d565b9150509250925092565b611a2e816118be565b82525050565b6000602082019050611a496000830184611a25565b92915050565b600060ff82169050919050565b611a6581611a4f565b82525050565b6000602082019050611a806000830184611a5c565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ac88261181e565b810181811067ffffffffffffffff82111715611ae757611ae6611a90565b5b80604052505050565b6000611afa61188a565b9050611b068282611abf565b919050565b600067ffffffffffffffff821115611b2657611b25611a90565b5b611b2f8261181e565b9050602081019050919050565b82818337600083830152505050565b6000611b5e611b5984611b0b565b611af0565b905082815260208101848484011115611b7a57611b79611a8b565b5b611b85848285611b3c565b509392505050565b600082601f830112611ba257611ba1611a86565b5b8135611bb2848260208601611b4b565b91505092915050565b600080fd5b600080fd5b60008083601f840112611bdb57611bda611a86565b5b8235905067ffffffffffffffff811115611bf857611bf7611bbb565b5b602083019150836001820283011115611c1457611c13611bc0565b5b9250929050565b60008083601f840112611c3157611c30611a86565b5b8235905067ffffffffffffffff811115611c4e57611c4d611bbb565b5b602083019150836020820283011115611c6a57611c69611bc0565b5b9250929050565b60008083601f840112611c8757611c86611a86565b5b8235905067ffffffffffffffff811115611ca457611ca3611bbb565b5b602083019150836020820283011115611cc057611cbf611bc0565b5b9250929050565b600080600080600080600080600060c08a8c031215611ce957611ce8611894565b5b60008a013567ffffffffffffffff811115611d0757611d06611899565b5b611d138c828d01611b8d565b99505060208a013567ffffffffffffffff811115611d3457611d33611899565b5b611d408c828d01611bc5565b985098505060408a013567ffffffffffffffff811115611d6357611d62611899565b5b611d6f8c828d01611c1b565b965096505060608a013567ffffffffffffffff811115611d9257611d91611899565b5b611d9e8c828d01611c71565b94509450506080611db18c828d016118e7565b92505060a0611dc28c828d0161191d565b9150509295985092959850929598565b600060208284031215611de857611de7611894565b5b600082013567ffffffffffffffff811115611e0657611e05611899565b5b611e1284828501611b8d565b91505092915050565b600067ffffffffffffffff82169050919050565b611e3881611e1b565b8114611e4357600080fd5b50565b600081359050611e5581611e2f565b92915050565b60008060408385031215611e7257611e71611894565b5b600083013567ffffffffffffffff811115611e9057611e8f611899565b5b611e9c85828601611b8d565b9250506020611ead85828601611e46565b9150509250929050565b600060208284031215611ecd57611ecc611894565b5b6000611edb848285016118e7565b91505092915050565b600060208284031215611efa57611ef9611894565b5b6000611f0884828501611e46565b91505092915050565b6000819050919050565b611f2481611f11565b8114611f2f57600080fd5b50565b600081359050611f4181611f1b565b92915050565b600060208284031215611f5d57611f5c611894565b5b6000611f6b84828501611f32565b91505092915050565b600060208284031215611f8a57611f89611894565b5b6000611f988482850161191d565b91505092915050565b611faa81611e1b565b82525050565b6000608082019050611fc56000830187611fa1565b611fd26020830186611a25565b611fdf6040830185611fa1565b611fec60608301846119a8565b95945050505050565b6000806040838503121561200c5761200b611894565b5b600061201a858286016118e7565b925050602061202b858286016118e7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061207c57607f821691505b60208210810361208f5761208e612035565b5b50919050565b600081519050919050565b6000819050602082019050919050565b60006120bc8251611f11565b80915050919050565b600082821b905092915050565b60006120dd82612095565b826120e7846120a0565b90506120f2816120b0565b925060208210156121325761212d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026120c5565b831692505b5050919050565b7f5573657220646f65736e27742065786973740000000000000000000000000000600082015250565b600061216f6012836117e3565b915061217a82612139565b602082019050919050565b6000602082019050818103600083015261219e81612162565b9050919050565b600081905092915050565b60006121bc83856121a5565b93506121c9838584611b3c565b82840190509392505050565b60006121e28284866121b0565b91508190509392505050565b7f50726f6f6620616c726561647920757365640000000000000000000000000000600082015250565b60006122246012836117e3565b915061222f826121ee565b602082019050919050565b6000602082019050818103600083015261225381612217565b9050919050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b60006122906012836117e3565b915061229b8261225a565b602082019050919050565b600060208201905081810360008301526122bf81612283565b9050919050565b600082825260208201905092915050565b60006122e383856122c6565b93506122f0838584611b3c565b6122f98361181e565b840190509392505050565b600082825260208201905092915050565b600080fd5b82818337505050565b600061232f8385612304565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561236257612361612315565b5b60208302925061237383858461231a565b82840190509392505050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b6123c8816123b5565b82525050565b60006123da83836123bf565b60208301905092915050565b6123ef816123b5565b81146123fa57600080fd5b50565b60008135905061240c816123e6565b92915050565b600061242160208401846123fd565b905092915050565b6000602082019050919050565b6000612442838561239a565b935061244d826123ab565b8060005b85811015612486576124638284612412565b61246d88826123ce565b975061247883612429565b925050600181019050612451565b5085925050509392505050565b60006124a0848484612436565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126124d5576124d46124b3565b5b83810192508235915060208301925067ffffffffffffffff8211156124fd576124fc6124a9565b5b602082023603831315612513576125126124ae565b5b509250929050565b6000602082019050919050565b6000612534838561237f565b93508360208402850161254684612390565b8060005b8781101561258c57848403895261256182846124b8565b61256c868284612493565b95506125778461251b565b935060208b019a50505060018101905061254a565b50829750879450505050509392505050565b600060808201905081810360008301526125b981898b6122d7565b905081810360208301526125ce818789612323565b905081810360408301526125e3818587612528565b90506125f26060830184611a25565b98975050505050505050565b61260781611972565b811461261257600080fd5b50565b600081519050612624816125fe565b92915050565b6000602082840312156126405761263f611894565b5b600061264e84828501612615565b91505092915050565b7f50726f6f66206973206e6f742076616c69640000000000000000000000000000600082015250565b600061268d6012836117e3565b915061269882612657565b602082019050919050565b600060208201905081810360008301526126bc81612680565b9050919050565b7f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e7472616360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061271f6021836117e3565b915061272a826126c3565b604082019050919050565b6000602082019050818103600083015261274e81612712565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278f82611e1b565b915067ffffffffffffffff82036127a9576127a8612755565b5b600182019050919050565b60006127bf826118fc565b91506127ca836118fc565b92508282019050808211156127e2576127e1612755565b5b92915050565b7f5573657220616c72656164792065786973747300000000000000000000000000600082015250565b600061281e6013836117e3565b9150612829826127e8565b602082019050919050565b6000602082019050818103600083015261284d81612811565b9050919050565b60006040820190506128696000830185611a25565b6128766020830184611fa1565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006128d96025836117e3565b91506128e48261287d565b604082019050919050565b60006020820190508181036000830152612908816128cc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061296b6026836117e3565b91506129768261290f565b604082019050919050565b6000602082019050818103600083015261299a8161295e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129fd6024836117e3565b9150612a08826129a1565b604082019050919050565b60006020820190508181036000830152612a2c816129f0565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a8f6022836117e3565b9150612a9a82612a33565b604082019050919050565b60006020820190508181036000830152612abe81612a82565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612afb601d836117e3565b9150612b0682612ac5565b602082019050919050565b60006020820190508181036000830152612b2a81612aee565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612b8d6025836117e3565b9150612b9882612b31565b604082019050919050565b60006020820190508181036000830152612bbc81612b80565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612c1f6023836117e3565b9150612c2a82612bc3565b604082019050919050565b60006020820190508181036000830152612c4e81612c12565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612cb16026836117e3565b9150612cbc82612c55565b604082019050919050565b60006020820190508181036000830152612ce081612ca4565b9050919050565b6000612cf2826118fc565b9150612cfd836118fc565b9250828203905081811115612d1557612d14612755565b5b92915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612d51601f836117e3565b9150612d5c82612d1b565b602082019050919050565b60006020820190508181036000830152612d8081612d44565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612dbd6020836117e3565b9150612dc882612d87565b602082019050919050565b60006020820190508181036000830152612dec81612db0565b905091905056fea2646970667358221220a779e6d9f98865ed75f88e684c1088d867e1646574e6bc0b70b99069007b709864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061014d5760003560e01c806370a08231116100c3578063b27eb8b41161007c578063b27eb8b4146103b6578063c30a0f25146103e6578063c7cd997f14610416578063cea6ab9814610432578063dd62ed3e14610465578063f2fde38b146104955761014d565b806370a08231146102e0578063715018a6146103105780638da5cb5b1461031a57806395d89b4114610338578063a457c2d714610356578063a9059cbb146103865761014d565b8063313ce56711610115578063313ce5671461020c57806335865f171461022a57806339509351146102465780633a51d246146102765780635694cb0a146102a65780635a2bcc18146102c25761014d565b806306fdde0314610152578063095ea7b31461017057806318160ddd146101a057806323b872dd146101be5780632b7ac3f3146101ee575b600080fd5b61015a6104b1565b6040516101679190611868565b60405180910390f35b61018a60048036038101906101859190611932565b610543565b604051610197919061198d565b60405180910390f35b6101a8610566565b6040516101b591906119b7565b60405180910390f35b6101d860048036038101906101d391906119d2565b610570565b6040516101e5919061198d565b60405180910390f35b6101f661059f565b6040516102039190611a34565b60405180910390f35b6102146105c5565b6040516102219190611a6b565b60405180910390f35b610244600480360381019061023f9190611cc7565b6105ce565b005b610260600480360381019061025b9190611932565b6109f3565b60405161026d919061198d565b60405180910390f35b610290600480360381019061028b9190611dd2565b610a2a565b60405161029d91906119b7565b60405180910390f35b6102c060048036038101906102bb9190611e5b565b610a58565b005b6102ca610cbf565b6040516102d791906119b7565b60405180910390f35b6102fa60048036038101906102f59190611eb7565b610cc5565b60405161030791906119b7565b60405180910390f35b610318610d0d565b005b610322610d21565b60405161032f9190611a34565b60405180910390f35b610340610d4b565b60405161034d9190611868565b60405180910390f35b610370600480360381019061036b9190611932565b610ddd565b60405161037d919061198d565b60405180910390f35b6103a0600480360381019061039b9190611932565b610e54565b6040516103ad919061198d565b60405180910390f35b6103d060048036038101906103cb9190611ee4565b610e77565b6040516103dd919061198d565b60405180910390f35b61040060048036038101906103fb9190611f47565b610e97565b60405161040d919061198d565b60405180910390f35b610430600480360381019061042b9190611f74565b610eb7565b005b61044c60048036038101906104479190611f47565b610ec9565b60405161045c9493929190611fb0565b60405180910390f35b61047f600480360381019061047a9190611ff5565b610f41565b60405161048c91906119b7565b60405180910390f35b6104af60048036038101906104aa9190611eb7565b610fc8565b005b6060600380546104c090612064565b80601f01602080910402602001604051908101604052809291908181526020018280546104ec90612064565b80156105395780601f1061050e57610100808354040283529160200191610539565b820191906000526020600020905b81548152906001019060200180831161051c57829003601f168201915b5050505050905090565b60008061054e61104b565b905061055b818585611053565b600191505092915050565b6000600254905090565b60008061057b61104b565b905061058885828561121c565b6105938585856112a8565b60019150509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006012905090565b6000896105da906120d2565b90506000600660008381526020019081526020016000206040518060800160405290816000820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016002820154815250509050600073ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1603610735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072c90612185565b60405180910390fd5b60008a8a6040516107479291906121d5565b604051809103902090506007600082815260200190815260200160002060009054906101000a900460ff16156107b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a99061223a565b60405180910390fd5b83826060015110156107f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f0906122a6565b60405180910390fd5b6000826020015173ffffffffffffffffffffffffffffffffffffffff166320702f578d8d8d8d8d8d8a602001516040518863ffffffff1660e01b8152600401610848979695949392919061259e565b602060405180830381865afa158015610865573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610889919061262a565b9050806108cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c2906126a3565b60405180910390fd5b60006108d630610cc5565b90508581101561091b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161091290612735565b60405180910390fd5b6109258787610e54565b508673ffffffffffffffffffffffffffffffffffffffff16857f4c13017ee95afc4bbd8a701dd9fbc9733f1f09f5a1b5438b5b9abd48e4c92d788860405161096d91906119b7565b60405180910390a361098c86856060015161151e90919063ffffffff16565b5060016007600085815260200190815260200160002060006101000a81548160ff0219169083151502179055508360000180518091906109cb90612784565b67ffffffffffffffff1667ffffffffffffffff16815250505050505050505050505050505050565b6000806109fe61104b565b9050610a1f818585610a108589610f41565b610a1a91906127b4565b611053565b600191505092915050565b60008082610a37906120d2565b90506006600082815260200190815260200160002060020154915050919050565b600082610a64906120d2565b9050600073ffffffffffffffffffffffffffffffffffffffff166006600083815260200190815260200160002060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0290612834565b60405180910390fd5b6001600860008467ffffffffffffffff1667ffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550610b5730600a54611534565b6040518060800160405280600067ffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff1681526020018367ffffffffffffffff168152602001600a5473ffffffffffffffffffffffffffffffffffffffff168152506006600083815260200190815260200160002060008201518160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060208201518160000160086101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160020155905050807f8c238420b7a93d0b301754da65d674a3c50ded89a3b3383983b1c8f88261f98b3384604051610cb2929190612854565b60405180910390a2505050565b600a5481565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610d1561168a565b610d1f6000611708565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610d5a90612064565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8690612064565b8015610dd35780601f10610da857610100808354040283529160200191610dd3565b820191906000526020600020905b815481529060010190602001808311610db657829003601f168201915b5050505050905090565b600080610de861104b565b90506000610df68286610f41565b905083811015610e3b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e32906128ef565b60405180910390fd5b610e488286868403611053565b60019250505092915050565b600080610e5f61104b565b9050610e6c8185856112a8565b600191505092915050565b60086020528060005260406000206000915054906101000a900460ff1681565b60076020528060005260406000206000915054906101000a900460ff1681565b610ebf61168a565b80600a8190555050565b60066020528060005260406000206000915090508060000160009054906101000a900467ffffffffffffffff16908060000160089054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900467ffffffffffffffff16908060020154905084565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610fd061168a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361103f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161103690612981565b60405180910390fd5b61104881611708565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036110c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110b990612a13565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611131576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112890612aa5565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161120f91906119b7565b60405180910390a3505050565b60006112288484610f41565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146112a25781811015611294576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128b90612b11565b60405180910390fd5b6112a18484848403611053565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611317576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161130e90612ba3565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90612c35565b60405180910390fd5b6113918383836117ce565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e90612cc7565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161150591906119b7565b60405180910390a36115188484846117d3565b50505050565b6000818361152c9190612ce7565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159a90612d67565b60405180910390fd5b6115af600083836117ce565b80600260008282546115c191906127b4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161167291906119b7565b60405180910390a3611686600083836117d3565b5050565b61169261104b565b73ffffffffffffffffffffffffffffffffffffffff166116b0610d21565b73ffffffffffffffffffffffffffffffffffffffff1614611706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116fd90612dd3565b60405180910390fd5b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156118125780820151818401526020810190506117f7565b60008484015250505050565b6000601f19601f8301169050919050565b600061183a826117d8565b61184481856117e3565b93506118548185602086016117f4565b61185d8161181e565b840191505092915050565b60006020820190508181036000830152611882818461182f565b905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006118c98261189e565b9050919050565b6118d9816118be565b81146118e457600080fd5b50565b6000813590506118f6816118d0565b92915050565b6000819050919050565b61190f816118fc565b811461191a57600080fd5b50565b60008135905061192c81611906565b92915050565b6000806040838503121561194957611948611894565b5b6000611957858286016118e7565b92505060206119688582860161191d565b9150509250929050565b60008115159050919050565b61198781611972565b82525050565b60006020820190506119a2600083018461197e565b92915050565b6119b1816118fc565b82525050565b60006020820190506119cc60008301846119a8565b92915050565b6000806000606084860312156119eb576119ea611894565b5b60006119f9868287016118e7565b9350506020611a0a868287016118e7565b9250506040611a1b8682870161191d565b9150509250925092565b611a2e816118be565b82525050565b6000602082019050611a496000830184611a25565b92915050565b600060ff82169050919050565b611a6581611a4f565b82525050565b6000602082019050611a806000830184611a5c565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611ac88261181e565b810181811067ffffffffffffffff82111715611ae757611ae6611a90565b5b80604052505050565b6000611afa61188a565b9050611b068282611abf565b919050565b600067ffffffffffffffff821115611b2657611b25611a90565b5b611b2f8261181e565b9050602081019050919050565b82818337600083830152505050565b6000611b5e611b5984611b0b565b611af0565b905082815260208101848484011115611b7a57611b79611a8b565b5b611b85848285611b3c565b509392505050565b600082601f830112611ba257611ba1611a86565b5b8135611bb2848260208601611b4b565b91505092915050565b600080fd5b600080fd5b60008083601f840112611bdb57611bda611a86565b5b8235905067ffffffffffffffff811115611bf857611bf7611bbb565b5b602083019150836001820283011115611c1457611c13611bc0565b5b9250929050565b60008083601f840112611c3157611c30611a86565b5b8235905067ffffffffffffffff811115611c4e57611c4d611bbb565b5b602083019150836020820283011115611c6a57611c69611bc0565b5b9250929050565b60008083601f840112611c8757611c86611a86565b5b8235905067ffffffffffffffff811115611ca457611ca3611bbb565b5b602083019150836020820283011115611cc057611cbf611bc0565b5b9250929050565b600080600080600080600080600060c08a8c031215611ce957611ce8611894565b5b60008a013567ffffffffffffffff811115611d0757611d06611899565b5b611d138c828d01611b8d565b99505060208a013567ffffffffffffffff811115611d3457611d33611899565b5b611d408c828d01611bc5565b985098505060408a013567ffffffffffffffff811115611d6357611d62611899565b5b611d6f8c828d01611c1b565b965096505060608a013567ffffffffffffffff811115611d9257611d91611899565b5b611d9e8c828d01611c71565b94509450506080611db18c828d016118e7565b92505060a0611dc28c828d0161191d565b9150509295985092959850929598565b600060208284031215611de857611de7611894565b5b600082013567ffffffffffffffff811115611e0657611e05611899565b5b611e1284828501611b8d565b91505092915050565b600067ffffffffffffffff82169050919050565b611e3881611e1b565b8114611e4357600080fd5b50565b600081359050611e5581611e2f565b92915050565b60008060408385031215611e7257611e71611894565b5b600083013567ffffffffffffffff811115611e9057611e8f611899565b5b611e9c85828601611b8d565b9250506020611ead85828601611e46565b9150509250929050565b600060208284031215611ecd57611ecc611894565b5b6000611edb848285016118e7565b91505092915050565b600060208284031215611efa57611ef9611894565b5b6000611f0884828501611e46565b91505092915050565b6000819050919050565b611f2481611f11565b8114611f2f57600080fd5b50565b600081359050611f4181611f1b565b92915050565b600060208284031215611f5d57611f5c611894565b5b6000611f6b84828501611f32565b91505092915050565b600060208284031215611f8a57611f89611894565b5b6000611f988482850161191d565b91505092915050565b611faa81611e1b565b82525050565b6000608082019050611fc56000830187611fa1565b611fd26020830186611a25565b611fdf6040830185611fa1565b611fec60608301846119a8565b95945050505050565b6000806040838503121561200c5761200b611894565b5b600061201a858286016118e7565b925050602061202b858286016118e7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061207c57607f821691505b60208210810361208f5761208e612035565b5b50919050565b600081519050919050565b6000819050602082019050919050565b60006120bc8251611f11565b80915050919050565b600082821b905092915050565b60006120dd82612095565b826120e7846120a0565b90506120f2816120b0565b925060208210156121325761212d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff836020036008026120c5565b831692505b5050919050565b7f5573657220646f65736e27742065786973740000000000000000000000000000600082015250565b600061216f6012836117e3565b915061217a82612139565b602082019050919050565b6000602082019050818103600083015261219e81612162565b9050919050565b600081905092915050565b60006121bc83856121a5565b93506121c9838584611b3c565b82840190509392505050565b60006121e28284866121b0565b91508190509392505050565b7f50726f6f6620616c726561647920757365640000000000000000000000000000600082015250565b60006122246012836117e3565b915061222f826121ee565b602082019050919050565b6000602082019050818103600083015261225381612217565b9050919050565b7f4e6f7420656e6f7567682062616c616e63650000000000000000000000000000600082015250565b60006122906012836117e3565b915061229b8261225a565b602082019050919050565b600060208201905081810360008301526122bf81612283565b9050919050565b600082825260208201905092915050565b60006122e383856122c6565b93506122f0838584611b3c565b6122f98361181e565b840190509392505050565b600082825260208201905092915050565b600080fd5b82818337505050565b600061232f8385612304565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561236257612361612315565b5b60208302925061237383858461231a565b82840190509392505050565b600082825260208201905092915050565b6000819050919050565b600082825260208201905092915050565b6000819050919050565b6000819050919050565b6123c8816123b5565b82525050565b60006123da83836123bf565b60208301905092915050565b6123ef816123b5565b81146123fa57600080fd5b50565b60008135905061240c816123e6565b92915050565b600061242160208401846123fd565b905092915050565b6000602082019050919050565b6000612442838561239a565b935061244d826123ab565b8060005b85811015612486576124638284612412565b61246d88826123ce565b975061247883612429565b925050600181019050612451565b5085925050509392505050565b60006124a0848484612436565b90509392505050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126124d5576124d46124b3565b5b83810192508235915060208301925067ffffffffffffffff8211156124fd576124fc6124a9565b5b602082023603831315612513576125126124ae565b5b509250929050565b6000602082019050919050565b6000612534838561237f565b93508360208402850161254684612390565b8060005b8781101561258c57848403895261256182846124b8565b61256c868284612493565b95506125778461251b565b935060208b019a50505060018101905061254a565b50829750879450505050509392505050565b600060808201905081810360008301526125b981898b6122d7565b905081810360208301526125ce818789612323565b905081810360408301526125e3818587612528565b90506125f26060830184611a25565b98975050505050505050565b61260781611972565b811461261257600080fd5b50565b600081519050612624816125fe565b92915050565b6000602082840312156126405761263f611894565b5b600061264e84828501612615565b91505092915050565b7f50726f6f66206973206e6f742076616c69640000000000000000000000000000600082015250565b600061268d6012836117e3565b915061269882612657565b602082019050919050565b600060208201905081810360008301526126bc81612680565b9050919050565b7f4e6f7420656e6f75676820746f6b656e7320696e2074686520636f6e7472616360008201527f7400000000000000000000000000000000000000000000000000000000000000602082015250565b600061271f6021836117e3565b915061272a826126c3565b604082019050919050565b6000602082019050818103600083015261274e81612712565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061278f82611e1b565b915067ffffffffffffffff82036127a9576127a8612755565b5b600182019050919050565b60006127bf826118fc565b91506127ca836118fc565b92508282019050808211156127e2576127e1612755565b5b92915050565b7f5573657220616c72656164792065786973747300000000000000000000000000600082015250565b600061281e6013836117e3565b9150612829826127e8565b602082019050919050565b6000602082019050818103600083015261284d81612811565b9050919050565b60006040820190506128696000830185611a25565b6128766020830184611fa1565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006128d96025836117e3565b91506128e48261287d565b604082019050919050565b60006020820190508181036000830152612908816128cc565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061296b6026836117e3565b91506129768261290f565b604082019050919050565b6000602082019050818103600083015261299a8161295e565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006129fd6024836117e3565b9150612a08826129a1565b604082019050919050565b60006020820190508181036000830152612a2c816129f0565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a8f6022836117e3565b9150612a9a82612a33565b604082019050919050565b60006020820190508181036000830152612abe81612a82565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612afb601d836117e3565b9150612b0682612ac5565b602082019050919050565b60006020820190508181036000830152612b2a81612aee565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000612b8d6025836117e3565b9150612b9882612b31565b604082019050919050565b60006020820190508181036000830152612bbc81612b80565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612c1f6023836117e3565b9150612c2a82612bc3565b604082019050919050565b60006020820190508181036000830152612c4e81612c12565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000612cb16026836117e3565b9150612cbc82612c55565b604082019050919050565b60006020820190508181036000830152612ce081612ca4565b9050919050565b6000612cf2826118fc565b9150612cfd836118fc565b9250828203905081811115612d1557612d14612755565b5b92915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000612d51601f836117e3565b9150612d5c82612d1b565b602082019050919050565b60006020820190508181036000830152612d8081612d44565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612dbd6020836117e3565b9150612dc882612d87565b602082019050919050565b60006020820190508181036000830152612dec81612db0565b905091905056fea2646970667358221220a779e6d9f98865ed75f88e684c1088d867e1646574e6bc0b70b99069007b709864736f6c63430008140033",
  "devdoc": {
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 128,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 136,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 140,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1179,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "users",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_struct(User)1174_storage)"
      },
      {
        "astId": 1183,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "usedProofs",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1187,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "usedStatements",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint64,t_bool)"
      },
      {
        "astId": 1189,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "verifier",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 1191,
        "contract": "contracts/GoogleAuth.sol:GoogleAuth",
        "label": "mintAmount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(User)1174_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct GoogleAuth.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1174_storage"
      },
      "t_mapping(t_uint64,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(User)1174_storage": {
        "encoding": "inplace",
        "label": "struct GoogleAuth.User",
        "members": [
          {
            "astId": 1167,
            "contract": "contracts/GoogleAuth.sol:GoogleAuth",
            "label": "nonce",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 1169,
            "contract": "contracts/GoogleAuth.sol:GoogleAuth",
            "label": "verifier",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1171,
            "contract": "contracts/GoogleAuth.sol:GoogleAuth",
            "label": "statementId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 1173,
            "contract": "contracts/GoogleAuth.sol:GoogleAuth",
            "label": "balance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}